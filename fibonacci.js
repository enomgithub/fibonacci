/* Generated by the Nim Compiler v0.17.2 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI3438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3442 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI13609 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3506 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3501 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3446 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3446 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3446.node = NNI3446;
NTI3501.base = NTI3424;
NTI3506.base = NTI3424;
var NNI3424 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3501, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3506, name: "up", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3446.base = NTI3424;
var NNI13609 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI13609.node = NNI13609;
var NNI3442 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3442.node = NNI3442;
var NNI3438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3438.node = NNI3438;
NTI3438.base = NTI3424;
NTI3442.base = NTI3438;

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_19817, src_19818, ti_19819) {
	var result_20229 = null;

		switch (ti_19819.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_19801(ti_19819))) {
			result_20229 = src_19818;
			}
			else {
				result_20229 = [src_19818[0], src_19818[1]];
			}
			
			break;
		case 19:
			      if (dest_19817 === null || dest_19817 === undefined) {
        dest_19817 = {};
      }
      else {
        for (var key in dest_19817) { delete dest_19817[key]; }
      }
      for (var key in src_19818) { dest_19817[key] = src_19818[key]; }
      result_20229 = dest_19817;
    
			break;
		case 18:
		case 17:
			if (!((ti_19819.base == null))) {
			result_20229 = nimCopy(dest_19817, src_19818, ti_19819.base);
			}
			else {
			if ((ti_19819.kind == 17)) {
			result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {m_type: ti_19819} : dest_19817;
			}
			else {
				result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {} : dest_19817;
			}
			}
			nimCopyAux(result_20229, src_19818, ti_19819.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_19818 === null) {
        result_20229 = null;
      }
      else {
        if (dest_19817 === null || dest_19817 === undefined) {
          dest_19817 = new Array(src_19818.length);
        }
        else {
          dest_19817.length = src_19818.length;
        }
        result_20229 = dest_19817;
        for (var i = 0; i < src_19818.length; ++i) {
          result_20229[i] = nimCopy(result_20229[i], src_19818[i], ti_19819.base);
        }
      }
    
			break;
		case 28:
			      if (src_19818 !== null) {
        result_20229 = src_19818.slice(0);
      }
    
			break;
		default: 
			result_20229 = src_19818;
			break;
		}

	return result_20229;

}

function makeNimstrLit(c_14603) {
		    var ln = c_14603.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_14603.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function eqStrings(a_17203, b_17204) {
		    if (a_17203 == b_17204) return true;
    if ((!a_17203) || (!b_17204)) return false;
    var alen = a_17203.length;
    if (alen != b_17204.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17203[i] != b_17204[i]) return false;
    return true;
  

	
}

function arrayConstr(len_20264, value_20265, typ_20266) {
		      var result = new Array(len_20264);
      for (var i = 0; i < len_20264; ++i) result[i] = nimCopy(null, value_20265, typ_20266);
      return result;
    

	
}

function cstrToNimstr(c_14803) {
		  var ln = c_14803.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_14803.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_14803.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function toJSStr(s_15003) {
		    var len = s_15003.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15003[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15003[i] < 128)
        asciiPart[i] = fcc(s_15003[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_14006, ename_14007) {
		e_14006.name = ename_14007;
		if ((excHandler == 0)) {
		unhandledException(e_14006);
		}
		
		e_14006.trace = nimCopy(null, rawWriteStackTrace_13828(), NTI138);
		throw e_14006;

	
}

function addInt(a_17403, b_17404) {
		      var result = a_17403 + b_17404;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function subInt(a_17603, b_17604) {
		      var result = a_17603 - b_17604;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}
var nimvm_6119 = false;
var nim_program_result = 0;
var globalRaiseHook_11605 = [null];
var localRaiseHook_11610 = [null];
var outOfMemHook_11613 = [null];

function isFatPointer_19801(ti_19803) {
	var result_19804 = false;

	BeforeRet: do {
		result_19804 = !((ConstSet1[ti_19803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_19804;

}

function nimCopyAux(dest_19822, src_19823, n_19825) {
		switch (n_19825.kind) {
		case 0:
			break;
		case 1:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
    
			break;
		case 2:
			L1: do {
				var i_20215 = 0;
				var colontmp__20217 = 0;
				colontmp__20217 = (n_19825.len - 1);
				var res_20220 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20220 <= colontmp__20217)) break L3;
							i_20215 = res_20220;
							nimCopyAux(dest_19822, src_19823, n_19825.sons[i_20215]);
							res_20220 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
      for (var i = 0; i < n_19825.sons.length; ++i) {
        nimCopyAux(dest_19822, src_19823, n_19825.sons[i][1]);
      }
    
			break;
		}

	
}

function add_11629(x_11632, x_11632_Idx, y_11633) {
		        var len = x_11632[0].length-1;
        for (var i = 0; i < y_11633.length; ++i) {
          x_11632[0][len] = y_11633.charCodeAt(i);
          ++len;
        }
        x_11632[0][len] = 0
      

	
}

function auxWriteStackTrace_13604(f_13606) {
					var Tmp3;

	var result_13607 = [null];

		var it_13615 = f_13606;
		var i_13616 = 0;
		var total_13617 = 0;
		var tempFrames_13621 = arrayConstr(64, {Field0: null, Field1: 0}, NTI13609);
		L1: do {
				L2: while (true) {
					if (!!((it_13615 == null))) Tmp3 = false; else {						Tmp3 = (i_13616 <= 63);					}				if (!Tmp3) break L2;
					tempFrames_13621[i_13616].Field0 = it_13615.procname;
					tempFrames_13621[i_13616].Field1 = it_13615.line;
					i_13616 += 1;
					total_13617 += 1;
					it_13615 = it_13615.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_13615 == null))) break L5;
					total_13617 += 1;
					it_13615 = it_13615.prev;
				}
		} while(false);
		result_13607[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		if (!((total_13617 == i_13616))) {
		if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_13607[0] = makeNimstrLit("(");};
		if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(cstrToNimstr(((total_13617 - i_13616))+"")); } else { result_13607[0] = cstrToNimstr(((total_13617 - i_13616))+"");};
		if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_13607[0] = makeNimstrLit(" calls omitted) ...\x0A");};
		}
		
		L6: do {
			var j_13815 = 0;
			var colontmp__13821 = 0;
			colontmp__13821 = (i_13616 - 1);
			var res_13824 = colontmp__13821;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_13824)) break L8;
						j_13815 = res_13824;
						add_11629(result_13607, 0, tempFrames_13621[j_13815].Field0);
						if ((0 < tempFrames_13621[j_13815].Field1)) {
						if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_13607[0] = makeNimstrLit(", line: ");};
						if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_13621[j_13815].Field1)+"")); } else { result_13607[0] = cstrToNimstr((tempFrames_13621[j_13815].Field1)+"");};
						}
						
						if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_13607[0] = makeNimstrLit("\x0A");};
						res_13824 -= 1;
					}
			} while(false);
		} while(false);

	return result_13607[0];

}

function rawWriteStackTrace_13828() {
	var result_13830 = null;

		if (!((framePtr == null))) {
		result_13830 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_13604(framePtr)), NTI138);
		}
		else {
			result_13830 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_13830;

}

function unhandledException(e_13853) {
			var Tmp1;

		var buf_13854 = [makeNimstrLit("")];
			if (!!(eqStrings(e_13853.message, null))) Tmp1 = false; else {				Tmp1 = !((e_13853.message[0] == 0));			}		if (Tmp1) {
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_13854[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(e_13853.message); } else { buf_13854[0] = e_13853.message;};
		}
		else {
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_13854[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_13854[0] = makeNimstrLit(" [");};
		add_11629(buf_13854, 0, e_13853.name);
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_13854[0] = makeNimstrLit("]\x0A");};
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(rawWriteStackTrace_13828()); } else { buf_13854[0] = rawWriteStackTrace_13828();};
		var cbuf_14001 = toJSStr(buf_13854[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14001);
  }
  else {
    throw cbuf_14001;
  }
  

	
}

function sysFatal_22421(message_22427) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2721;
		var e_22429 = null;
		F.line = 2722;
		e_22429 = {m_type: NTI3446, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2723;
		e_22429.message = nimCopy(null, message_22427, NTI138);
		F.line = 2724;
		raiseException(e_22429, "AssertionError");
	framePtr = F.prev;

	
}

function raiseAssert_22416(msg_22418) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3605;
		sysFatal_22421(msg_22418);
	framePtr = F.prev;

	
}

function failedAssertImpl_22439(msg_22441) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3613;
		raiseAssert_22416(msg_22441);
	framePtr = F.prev;

	
}

function raiseOverflow() {
		var e_14440 = null;
		e_14440 = {m_type: NTI3442, parent: null, name: null, message: null, trace: null, up: null};
		e_14440.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_14440.parent = null;
		raiseException(e_14440, "OverflowError");

	
}

function fibonacci_44002(n_44004) {
	var result_44005 = 0;

	var F={procname:"fibonacci.fibonacci",prev:framePtr,filename:"fibonacci.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((0 <= n_44004))) {
		F.line = 7;
		failedAssertImpl_22439(makeNimstrLit("\x0D\x0A  0 <= n "));
		}
		
		if ((n_44004 == 0)) {
		F.line = 9;
		result_44005 = 0;
		break BeforeRet;
		}
		else {
		if ((n_44004 == 1)) {
		F.line = 11;
		result_44005 = 1;
		break BeforeRet;
		}
		else {
			F.line = 13;
			result_44005 = addInt(fibonacci_44002(subInt(n_44004, 2)), fibonacci_44002(subInt(n_44004, 1)));
			break BeforeRet;
		}
		}
	} while (false);
	framePtr = F.prev;

	return result_44005;

}

function nsuIntToStr(x_38644, minchars_38645) {
	var result_38646 = null;

		result_38646 = nimCopy(null, cstrToNimstr((Math.abs(x_38644))+""), NTI138);
		L1: do {
			var i_38656 = 0;
			var colontmp__38658 = 0;
			colontmp__38658 = (minchars_38645 - (result_38646 != null ? result_38646.length-1 : 0));
			var res_38661 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_38661 <= colontmp__38658)) break L3;
						i_38656 = res_38661;
						result_38646 = nimCopy(null, [48].concat(result_38646), NTI138);
						res_38661 += 1;
					}
			} while(false);
		} while(false);
		if ((x_38644 < 0)) {
		result_38646 = nimCopy(null, [45].concat(result_38646), NTI138);
		}
		

	return result_38646;

}

function main_45001() {
	var F={procname:"fibonacci_for_js.main",prev:framePtr,filename:"fibonacci_for_js.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 11;
			var i_45017 = 0;
			F.line = 1973;
			var res_45023 = 1;
			L2: do {
				F.line = 1974;
					L3: while (true) {
					if (!(res_45023 <= 15)) break L3;
						F.line = 1975;
						i_45017 = res_45023;
						F.line = 12;
						var number_45018 = fibonacci_44002(i_45017);
						F.line = 13;
						var bar_45019 = document.createElement("div");
						F.line = 14;
						bar_45019.style.width = toJSStr((nsuIntToStr(number_45018, 1).slice(0,-1)).concat(makeNimstrLit("px")));
						F.line = 15;
						bar_45019.style.height = toJSStr((nsuIntToStr(10, 1).slice(0,-1)).concat(makeNimstrLit("px")));
						F.line = 16;
						bar_45019.style.backgroundColor = "#302833";
						F.line = 17;
						document.getElementById("fibonacci-bar").appendChild(bar_45019);
						F.line = 1976;
						res_45023 = addInt(res_45023, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}
main_45001();
